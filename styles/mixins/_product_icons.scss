$productIconSVGSpriteUrl: "/ContentBase/img/ProductIcons/product_icons.svg";
$sizeMultiplier: 1;
$spriteWidth: 76px !default;
$iconArea: 28px !default;
$iconPadding: 4px !default;
$positionX: 0 !default;

@mixin calculate-size-multiplier($isSmall) {
    @if($isSmall) {
        $sizeMultiplier: 0.8 !global;
    }
}

@mixin calculate-positionX($type) {
    @if($type == "outline") {
        $positionX: 0 !global;
    } @else if ($type == "filled") {
        $positionX: - $iconArea + $iconPadding !global;
    } @else if ($type == "partly-filled") {
        $positionX: - 2 * $iconArea + $iconPadding !global;
    } @else {
        @warn "Unfortunately, no value could be retrieved from `#{$type}`.";
    }
}

@mixin handle-product-icons($isSmall, $type) {
    $products: (
        kemb: $positionX 0,
        diadoc: $positionX -1*$iconArea,
        focus: $positionX -2*$iconArea,
        normativ: $positionX -3*$iconArea,
        evrika: $positionX -4*$iconArea,
        elba: $positionX -5*$iconArea,
        kopf: $positionX -6*$iconArea,
        documentoved: $positionX -7*$iconArea,
        expert: $positionX -8*$iconArea,
        alkodeclaration: $positionX -9*$iconArea,
        alkosverka: $positionX -10*$iconArea,
        egais: $positionX -11*$iconArea,
        edi: $positionX -12*$iconArea,
        zakupki: $positionX -13*$iconArea,
        pii: $positionX -14*$iconArea,
        retail: $positionX -15*$iconArea,
        kep: $positionX -16*$iconArea,
        security: $positionX -17*$iconArea,
        crypto: $positionX -18*$iconArea,
        finguru: $positionX -19*$iconArea,
        buhonline: $positionX -20*$iconArea,
        school-b: $positionX -21*$iconArea,
        school-academy: $positionX -22*$iconArea,
        school-et: $positionX -23*$iconArea,
        sales: $positionX -24*$iconArea,
        billing: $positionX -25*$iconArea,
        customs: $positionX -26*$iconArea,
        fms: $positionX -27*$iconArea,
        sverka: $positionX -28*$iconArea,
        otchetru: $positionX -29*$iconArea,
        kontur: $positionX -30*$iconArea
    ) !global;
}

@mixin product-icons($isSmall: true, $type: "outline") {
    @include calculate-size-multiplier($isSmall);
    @include calculate-positionX($type);
    @include handle-product-icons($isSmall, $type);

    @each $product, $position in $products {
        &.#{$product} {
            width: $iconArea;
            height: $iconArea;
            background: url($productIconSVGSpriteUrl) no-repeat #{$position};
            background-size: $spriteWidth auto;
            transform: scale($sizeMultiplier);
        }
    }
}

@mixin product-icon($product, $isSmall: true, $type: "outline") {
    @include calculate-size-multiplier($isSmall);
    @include calculate-positionX($type);
    @include handle-product-icons($isSmall, $type);

    @if map-has-key($products, $product) {
        &.#{$product} {
            width: $iconArea;
            height: $iconArea;
            background: url($productIconSVGSpriteUrl) no-repeat #{map-get($products, $product)};
            background-size: $spriteWidth auto;
            transform: scale($sizeMultiplier);
        }
    } @else {
        @warn "Unfortunately, no value could be retrieved from `#{$product}`. "
        + "Please make sure it is defined in `$products` map.";
    }
}
